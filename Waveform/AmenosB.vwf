/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("a0")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("a1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("a2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("a3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("b0")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("b1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("b2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("b3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("CarryOut")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("r0")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("r1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("r2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("r3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("SaidaSinal")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("SigA")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("SigB")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("a0")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 256.0;
			LEVEL 1 FOR 256.0;
		}
		LEVEL 0 FOR 256.0;
		LEVEL 1 FOR 232.0;
	}
}

TRANSITION_LIST("a1")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 128.0;
			LEVEL 1 FOR 128.0;
		}
		LEVEL 0 FOR 128.0;
		LEVEL 1 FOR 104.0;
	}
}

TRANSITION_LIST("a2")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 64.0;
			LEVEL 1 FOR 64.0;
		}
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("a3")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 32.0;
		}
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("b0")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 62;
			LEVEL 0 FOR 8.0;
			LEVEL 1 FOR 8.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("b1")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 125;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
	}
}

TRANSITION_LIST("b2")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 250;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
	}
}

TRANSITION_LIST("b3")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 500;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
	}
}

TRANSITION_LIST("CarryOut")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 63.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 29.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 28.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 27.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 26.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 7.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 23.0;
		LEVEL 1 FOR 9.0;
		LEVEL 0 FOR 22.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 21.0;
		LEVEL 1 FOR 11.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 19.0;
		LEVEL 1 FOR 13.0;
		LEVEL 0 FOR 18.0;
		LEVEL 1 FOR 14.0;
		LEVEL 0 FOR 17.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 47.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 29.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 28.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 27.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 26.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 7.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 23.0;
		LEVEL 1 FOR 9.0;
		LEVEL 0 FOR 22.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 21.0;
		LEVEL 1 FOR 11.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 19.0;
		LEVEL 1 FOR 13.0;
		LEVEL 0 FOR 18.0;
		LEVEL 1 FOR 14.0;
		LEVEL 0 FOR 17.0;
		LEVEL 1 FOR 7.0;
	}
}

TRANSITION_LIST("r0")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 8.0;
			LEVEL 1 FOR 8.0;
		}
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 7.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 13.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 17.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 19.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 21.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 7.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 13.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 12.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 14.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 7.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 12.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 7.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 14.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 7.0;
	}
}

TRANSITION_LIST("r1")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 7.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 7.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
		}
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
		}
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 7.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
		}
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 8.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 4.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 8.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
		}
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
		}
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 8.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 4.0;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 3.0;
	}
}

TRANSITION_LIST("r2")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL 1 FOR 2.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 5;
				LEVEL 1 FOR 2.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("r3")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 14;
			LEVEL 1 FOR 2.0;
			NODE
			{
				REPEAT = 15;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			NODE
			{
				REPEAT = 15;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 1.0;
			}
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
	}
}

TRANSITION_LIST("SaidaSinal")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 18.0;
		LEVEL 1 FOR 14.0;
		LEVEL 0 FOR 19.0;
		LEVEL 1 FOR 13.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 21.0;
		LEVEL 1 FOR 11.0;
		LEVEL 0 FOR 22.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 23.0;
		LEVEL 1 FOR 9.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 7.0;
		LEVEL 0 FOR 26.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 27.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 28.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 29.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 31.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 17.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 18.0;
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 19.0;
		LEVEL 0 FOR 13.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 12.0;
		LEVEL 1 FOR 21.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 22.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 23.0;
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 24.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 7.0;
		LEVEL 1 FOR 26.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 27.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 28.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 29.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("SigA")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 512.0;
		LEVEL 1 FOR 488.0;
	}
}

TRANSITION_LIST("SigB")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "SigA";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a0";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "SigB";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "b0";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "b1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "b2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "b3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "SaidaSinal";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "CarryOut";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "r0";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "r1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "r2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "r3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 459000;
	MASTER = TRUE;
}
;
