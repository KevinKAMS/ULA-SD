/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("A")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("ad")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alinha")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("B")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("bd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("blinha")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("C")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("cd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clinha")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("D")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("dd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dlinha")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("E")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("ed")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("elinha")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("fd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("flinha")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("gd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("glinha")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("A")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("ad")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 22.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("alinha")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 6.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 8.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 6.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
	}
}

TRANSITION_LIST("B")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 62;
			LEVEL 0 FOR 8.0;
			LEVEL 1 FOR 8.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("bd")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("blinha")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL 0 FOR 8.0;
			}
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 8.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
	}
}

TRANSITION_LIST("C")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 125;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
	}
}

TRANSITION_LIST("cd")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 22.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("clinha")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 9.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 9.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
	}
}

TRANSITION_LIST("D")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 250;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
	}
}

TRANSITION_LIST("dd")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 22.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("dlinha")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 1.0;
					LEVEL 0 FOR 2.0;
				}
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 3.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 5.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("E")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 500;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
	}
}

TRANSITION_LIST("ed")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("elinha")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 3.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 0 FOR 1.0;
					LEVEL 1 FOR 1.0;
				}
			}
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 1.0;
			}
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("fd")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 22.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("flinha")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("gd")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 12.0;
		}
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("glinha")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "A";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "B";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "C";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "E";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ad";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "bd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "cd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ed";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "fd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "gd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "alinha";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "blinha";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clinha";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dlinha";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "elinha";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "flinha";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "glinha";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 377000;
	MASTER = TRUE;
}
;
